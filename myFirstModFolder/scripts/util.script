/***********************************************************************

doom_util.script

This defines utility functions for scripts

***********************************************************************/

/*
==================
ThirdPersonCam

Creates a third person camera that follows an object
==================
*/
entity ThirdPersonCam( entity watch ) {
	entity camera;

	camera = sys.spawn( "idCameraFollow" );
//RAVEN BEGIN
	//bgeisler:fixme kfuller:fixme someone:fixme apparently they got rid of this camera command?
	//camera.follow( watch );
//RAVEN END	
	sys.setCamera( camera );

	return camera;
}

/*
==================
UnsetFlag
==================
*/

float UnsetFlag( float var, float flag )
{
	if ( var & flag )
	{
		return var - flag;
	}
	return var;
}

/*
==================
PlaybackFlagIsSetNow
==================
*/

boolean PlaybackFlagIsSetNow( float flagNew, float flagOld, float flagToTest )
{
	if( (flagNew & flagToTest) && !(flagOld & flagToTest) )
	{
		return true;
	}
	return false;
}

/*
==================
PlaybackFlagIsUnsetNow
==================
*/

boolean PlaybackFlagIsUnsetNow( float flagNew, float flagOld, float flagToTest )
{
	if( (flagOld & flagToTest) && !(flagNew & flagToTest) )
	{
		return true;
	}
	return false;
}

/*
==================
PlaybackImpulseIsSetNow
==================
*/

boolean PlaybackImpulseIsSetNow( float impulses, float impulseToTest )
{
	if ( impulses == 0 )
	{
		return false;
	}

	if ( ( impulses & 255 ) == impulseToTest )
	{
		return true;
	}
	if ( ( ( impulses / 256 ) & 255 ) == impulseToTest )
	{
		return true;
	}
	if ( ( ( impulses / 65536 ) & 255 ) == impulseToTest )
	{
		return true;
	}
	return false;
}

/*
==================
RandomRangeTime
==================
*/

float RandomRangeTime( float delay1, float delay2 )
{
	float t;
	
	t = sys.getTime();
	t += sys.random( delay2 - delay1 ) + delay1;
	
	return t;
}

/*
==================
GetEntityFromBaseName
==================
*/

entity GetEntityFromBaseName(string baseName, float whichEnt)
{
	string whichEntName;
	
	whichEntName = baseName + whichEnt;
	return sys.getEntity(whichEntName);
}

/*
==================
VectorSubtract
==================
*/

// fixme: Is this really neccessary?

vector VectorSubtract(vector a, vector b)
{
	vector c;
	
	c_x = a_x - b_x;
	c_y = a_y - b_y;
	c_z = a_z - b_z;
	
	return c;
}

//----------------------------------------------------------
// vector calcMoveSpeedByVector
//
// Finds the distance between two points, and then 
// adjusts the vector to make a per-second speed that will
// take a unit between those two points over a period of time
//
// input: vector At, vector Dest, float Time
// 
// returns: vectorDistance normalized by Time.
//
// Jim Shepard 10 April 04
//----------------------------------------------------------
vector calcMoveSpeedByVector(vector vAt, vector vDest, float fTime)
{
	//assert that our travel time is not 0.
	//sys.assert(fTime && int("fTime was 0 for calcMoveSpeedByVector"));

	//subtract at from dest to get the one-second travel time.
	vector vTravel;
	vTravel = VectorSubtract(vDest,vAt);

	//now divide each component by fTime
	vTravel_x = vTravel_x / fTime;
	vTravel_y = vTravel_y / fTime;
	vTravel_z = vTravel_z / fTime;

	//return the vector
	return vTravel;

}

//----------------------------------------------------------
// vector calcMoveSpeedByEntity
//
// Finds the distance between two entities, and then 
// adjusts the vector to make a per-second speed that will
// take a unit between those two points over a period of time
//
// input: vector At, vector Dest, float Time
// 
// returns: vectorDistance normalized by Time.
//
// Jim Shepard 10 April 04
//----------------------------------------------------------
vector calcMoveSpeedByEntity(entity entAt, entity entDest, float fTime)
{
	//assert that our travel time is not 0.
	//sys.assert(fTime && int("fTime was 0 for calcMoveSpeedByVector"));

	//create two vectors to hold our values
	vector vAt;
	vector vDest;

	vAt = entAt.getOrigin();
	vDest = entDest.getOrigin();

	//from here I could just call calcMoveSpeedByVector, but
	//I don't want to add another function to the call stack :)

	//subtract at from dest to get the one-second travel time.
	vector vTravel;
	vTravel = VectorSubtract(vDest,vAt);

	//now divide each component by fTime
	vTravel_x = vTravel_x / fTime;
	vTravel_y = vTravel_y / fTime;
	vTravel_z = vTravel_z / fTime;

	//return the vector
	return vTravel;

}
//----------------------------------------------------------
// entity spawnOnEntity
//
// This function takes in a string type for entity and
// a seperate entity to spawn on top of, such as a relay
// or trigger. One entity of the string type is spawned and 
// then returned. Careful you don't 'accidentally' telefrag
// someone...
//
// input: string strType, entity entLocation
// 
// returns: the new entity
//
// Jim Shepard 10 April 04
//----------------------------------------------------------
entity spawnOnEntity(string strType,entity entLocation)
{
	//here's the vector we'll need to set the origin
	vector v;
	v = entLocation.getOrigin();

	//the entity we'll return.
	entity entNew;
	
	//spawn!
	entNew = sys.spawn(strType);
	
	//move it to the location;
	entNew.setOrigin(v);

	//cha cha cha
	return entNew;


}
//----------------------------------------------------------
// void destroyCover(entity entTrigger)
//
// Specialized function used to create an extra-powerful
// destruction effect. Fake physics, for when real physics wont'
// cut it. 
//
// Use a trigger relay to call this function. Every target 
// the trigger relay has will be tossed by the explosion.
//
// If you have an entity you want to remove, add it to the key tgtRemove.
//
// If you want to trigger a func_fx, add it to the key tgtFx.
//
// input: triggering entity
//
// jshepard | june 04
//----------------------------------------------------------
void destroyCover(entity entTrigger)
{
	sys.println("destroyCover::begin");
	float fTargNum = entTrigger.numTargets();
	
	//fTargNum--;
	sys.println("destroyCover::I see " + fTargNum + " targets.");
	float t=0;

	vector vForce;
	entity entTarg;

	//remove the bounding box
	entTarg = sys.getEntity(entTrigger.getKey("tgtRemove"));
	entTarg.remove();
	
	//disableclip();

	//send the barrels up
	for(t = 0; t < fTargNum; t++)
	{
		
		entTarg = entTrigger.getTarget(t);
		sys.println("destroyCover::launching " + entTarg.getName() );
		//send the object flying
		vForce_z = 200000;
		vForce_x = -60000 + sys.random(120000);
		vForce_y = -60000 + sys.random(120000);

		entTarg.applyImpulse(entTrigger, entTrigger.getOrigin(), vForce);
	
	}

	//get the effect
	entTarg = sys.getEntity(entTrigger.getKey("tgtFX"));
	sys.println("destroyCover::fire off " + entTarg.getName());
	sys.trigger(entTarg);
}
//-------------------------------------------------------------------------------
// void printVector(vector v)
//
// Prints a vector to the console
//
// jshepard | Jan 2005
//-------------------------------------------------------------------------------
void printVector(vector v)	{
	sys.println("x:" + v_x + " y:" + v_y + " z:" + v_z); 
}


//-------------------------------------------------------------------------------
// vector getNearbyPoint()
//
// Send in a vector, and a vector of variance, you get a point nearby.
//
// jshepard | Aug 2004
//-------------------------------------------------------------------------------
vector getNearbyPoint(vector vSource, vector vEp)
{
	sys.println("vector getNearbyPoint::begin");
	
	//this will take each component of the vector, and add -100% to 100% of the value of it's
	//matching epsilon component.
	vSource_x += vEp_x * (sys.random(2) - 1);
	vSource_y += vEp_y * (sys.random(2) - 1);
	vSource_z += vEp_z * (sys.random(2) - 1);
	
	return vSource;
	
	sys.println("vector getNearbyPoint::end");

} //-------------- End vector getNearbyPoint ---------------

//-------------------------------------------------------------------------------
// void nudgeTargets()
//
// Will shake around all the targets of a given entity
//
// jshepard | Nov 2004
//-------------------------------------------------------------------------------
void nudgeTargets(entity entActivator)
{
	//sys.println("void nudgeTargets::begin");
	
	float f;
	float fTargetNum = entActivator.numTargets();
	entity entTemp;

	for(f = 0; f < fTargetNum; f++)	{
		entTemp = entActivator.getTarget(f);
		entTemp.applyImpulse(entTemp,entTemp.getWorldOrigin(),'0 0 2000');
		sys.println(entTemp.getName());
	}

	//sys.println("void nudgeTargets::end");

} //-------------- End void nudgeTargets ---------------

void removeTargets(entity entActivator)
{
	//sys.println("void removeTargets::begin");
	
	float f;
	float fTargetNum = entActivator.numTargets();
	entity entTemp;

	for(f = 0; f < fTargetNum; f++)	{
		entTemp = entActivator.getTarget(f);
		entTemp.remove();
	}

	//sys.println("void removeTargets::end");

}

float randomRoundFloat(float low, float high)	{

	float diff = (high - low) + 1;
	float fRand = sys.random( diff);
	fRand = (fRand * 1000) % diff;
	fRand = fRand + low;

	return fRand;
}


/*
void rotateEntityAroundVector(entity ent, vector vecRot, float fDegree)
{
	//here's the sin and cos needed to build a rotation matrix
	float fCos;
	float fSin;

	//this is currently in degrees...
	fSin = sys.sin(fDegree);
	fCos = sys.cos(fDegree);

	//this is our "matrix"
	vector vMat1;
	vector vMat2;
	vector vMat3;

	//build a rotation matrix.
	vMat1_x =	vecRot_x + fCos * (vecRot_y + vecRot_z);
	vMat1_y = - vecRot_z * fSin;
	vMat1_z = - vecRot_y * fSin;

	vMat2_x =	vecRot_z * fSin; 
	vMat2_y =   vecRot_y + fCos * (vecRot_x + vecRot_z);
	vMat2_z = - vecRot_x * fSin;

	vMat3_x =	vecRot_y * fSin;
	vMat3_y =   vecRot_x * fSin;
	vMat3_z =   vecRot_z + fCos * (vecRot_x + vecRot_y);

	//now multiply the entity's location vector by the matrix.
	vector vEnt = ent.getOrigin();

	vEnt_x = (vEnt_x * vMat1_x) + (vEnt_y * vMat2_x) + (vEnt_z * vMat3_x); 
	vEnt_y = (vEnt_x * vMat1_y) + (vEnt_y * vMat2_y) + (vEnt_z * vMat3_y); 
	vEnt_z = (vEnt_x * vMat1_z) + (vEnt_y * vMat2_z) + (vEnt_z * vMat3_z); 

	//move the object
	ent.setOrigin(vEnt);


}

*/

/*
void createRotationMatrix ( double*  pAxis,
                            double** pMatrix,
                            double   dAlpha )
{
  // calculate cosinus and sinus (in radiant, not in degree!)
  double fCos = cos ( dAlpha * PI / 180);
  double fSin = sin ( dAlpha * PI / 180);

  // build the matrix
  pM[0][0] =   pAxis[0] + fCos * (pAxis[1] + pAxis[2]);
  pM[0][1] = - pAxis[2] * fSin;
  pM[0][2] = - pAxis[1] * fSin;
 
  pM[1][0] =   pAxis[2] * fSin;
  pM[1][1] =   pAxis[1] + fCos * (pAxis[0] + pAxis[2]);
  pM[1][2] = - pAxis[0] * fSin;
  
  pM[2][0] =   pAxis[1] * fSin;
  pM[2][1] =   pAxis[0] * fSin;
  pM[2][2] =   pAxis[2] + fCos * (pAxis[0] + pAxis[1]);

  
NewX = X * Matrix[0][0] + Y * Matrix[1][0] + Z * Matrix[2][0];
NewY = X * Matrix[0][1] + Y * Matrix[1][1] + Z * Matrix[2][1];
NewZ = X * Matrix[0][2] + Y * Matrix[1][2] + Z * Matrix[2][2];

  }
*/

boolean isValidEntity ( entity ent ) {
	if ( !(!ent) ) {
		return true;
	}
	return false;
}

boolean isLivingEntity ( entity ent ) {
	if ( !(!ent) ) {
		if( ent.getHealth() > 0 )	{
			return true;
		}
	}
	return false;
}

void aiSpeak ( entity ent, string lipsync ) {
	if ( !isValidEntity ( ent ) ) {
		return;
	}
	ent.speak ( lipsync );
}

void aiSpeakDone( entity ent ) {
	while ( isValidEntity ( ent ) ) {
		if ( !ent.isSpeaking ( ) ) {
			return;
		}
		sys.waitFrame ( );
	}
}

void aiSpeakWait ( entity ent, string lipsync ) {
	aiSpeak ( ent, lipsync );
	aiSpeakDone( ent );
}	

void aiScriptedWait ( entity ent ) {
	while ( isValidEntity ( ent ) ) {
		if( ent.scriptedDone ( ) ) {
			return;
		}
		sys.waitFrame ( );
	}
}

boolean aiScriptedDone ( entity ent ) {
	if ( !ent ) {
		return true;
	}
	return ent.scriptedDone ( );
}

void aiScriptedMove ( entity ent, entity dest, float minDist, boolean endWithIdle ) {
	ent.scriptedMove ( dest, minDist, endWithIdle );
}

void aiScriptedMoveWait ( entity ent, entity dest, float minDist, boolean endWithIdle ) {
	ent.scriptedMove ( dest, minDist, endWithIdle );
	aiScriptedWait ( ent );
}

void aiScriptedFace ( entity ent, entity face, boolean endWithIdle ) {
	ent.scriptedFace ( face, endWithIdle );
}

void aiScriptedFaceWait ( entity ent, entity face, boolean endWithIdle ) {
	ent.scriptedFace ( face, endWithIdle );
	aiScriptedWait ( ent );
}

void aiScriptedAnim ( entity ent, string anim, float blendFrames, boolean endWithIdle ) {
	ent.scriptedAnim ( anim, blendFrames, false, endWithIdle );
}

void aiScriptedAnimWait ( entity ent, string anim, float blendFrames, boolean endWithIdle ) {
	ent.scriptedAnim ( anim, blendFrames, false, endWithIdle );
	aiScriptedWait ( ent );
}

void aiScriptedAnimLoop ( entity ent, string anim, float blendFrames ) {
	ent.scriptedAnim ( anim, blendFrames, true, false );
}

void aiScriptedPlaybackMove ( entity ent, string playback, float flags, float numFrames ) {
	ent.scriptedPlaybackMove ( playback, flags, numFrames  );
}

void aiScriptedPlaybackMoveWait ( entity ent, string playback, float flags, float numFrames ) {
	ent.scriptedPlaybackMove ( playback, flags, numFrames  );
	aiScriptedWait ( ent );
}

void aiScriptedAction ( entity ent, entity actionEnt, boolean endWithIdle ) {
	ent.scriptedAction ( actionEnt, endWithIdle );
}

void aiScriptedActionWait ( entity ent, entity actionEnt, boolean endWithIdle ) {
	ent.scriptedAction ( actionEnt, endWithIdle );
	aiScriptedWait ( ent );
}

void aiScriptedStop ( entity ent ) {
	ent.scriptedStop ( );
}

void aiScriptedTetherMove( entity ent, entity tether)	{
	ent.scriptedStop();
	ent.activate ( tether );
}

void aiScriptedTetherMoveWait( entity ent, entity tether)	{
	ent.scriptedStop();
	ent.activate ( tether );
	while( ent.isTethered() && (!ent.isWithinTether() || ent.isMoving( ) ) ) {
		sys.waitFrame();
	}
}

void cinematicAnimSpeak( entity ent, string bodyAnim, string headAnim, float blendFrames, float endWithIdle )	{
	aiScriptedAnim( ent, bodyAnim, blendFrames, endWithIdle );
	entity headEnt = ent.getHead();
	
	if ( headEnt != $null_entity ) {
		headEnt.playAnim( ANIMCHANNEL_ALL, headAnim );
	}
}

// TODO: should actually make this use aiScriptAnimWait?  Don't have time to make the change and test it now...
void cinematicAnimSpeakWait( entity ent, string bodyAnim, string headAnim, float blendFrames, float endWithIdle )	{
	cinematicAnimSpeak( ent, bodyAnim, headAnim, blendFrames, endWithIdle );
	aiScriptedWait ( ent );
}

// Just play a head animation on the specified actor
void _playHeadAnim( entity ent, string headAnim )	{
	entity headEnt = ent.getHead();
	
	if ( headEnt != $null_entity ) {
		sys.wait( headEnt.playAnim( ANIMCHANNEL_ALL, headAnim ));
		headEnt.clearAnims();
	}
	
}


void playHeadAnim( entity ent, string headAnim )	{
	thread _playHeadAnim( ent, headAnim );
}

// loop a head animation on the specified actor
void playHeadAnimLoop( entity ent, string headAnim )	{
	entity headEnt = ent.getHead();
	
	if ( headEnt != $null_entity ) {
		headEnt.playCycle( ANIMCHANNEL_ALL, headAnim );
	}
}

//clears the animations running on the head
void clearHeadAnims( entity ent )	{
	entity headEnt = ent.getHead();
	headEnt.stopAnim( ANIMCHANNEL_ALL, 0);
	headEnt.clearAnims();
}


// play a head animation and start the specified vo line
void playHeadAnimSpeak( entity ent, string headAnim, string voLine )	{
	entity headEnt = ent.getHead();
	
	if ( headEnt != $null_entity ) {
		headEnt.playAnim( ANIMCHANNEL_ALL, headAnim );
	}

	ent.startSound( voLine, SND_CHANNEL_ANY, 0 );
}

// RAVEN BEGIN
// jdischler: wrappers for the jump down support added by mgummelt
//-------------------------------------------------------------------------------------
// Scripted jumps are currently only valid for any of the flavours of strogg_marines!!
// extracts yaw from angleEnt
//-------------------------------------------------------------------------------------
void aiScriptedJumpDownWait( entity ent, entity angleEnt )
{
	vector angs = angleEnt.getAngles();
	ent.scriptedJumpDown( angs_y );
	aiScriptedWait( ent );
}

//-------------------------------------------------------------------------------------
// Scripted jumps are currently only valid for any of the flavours of strogg_marines!!
// moves to the specified entity, extracts yaw from the targets angles, then jumps
//-------------------------------------------------------------------------------------
void aiScriptedMoveJumpDownWait( entity ent, entity target, float minDist )
{
	aiScriptedMoveWait( ent, target, minDist, false );
	aiScriptedJumpDownWait( ent, target );
}
// RAVEN END

// RAVEN BEGIN
// abahr: quasi-iterator for looping through an entities targets
#define ForEachTargetOf( ent, target )																		\
	float index_##ent;																						\																				\
	ent.removeNullTargets();																				\				
	for( index_##ent = 0; $null_entity != (target = ent.getTarget(index_##ent)); index_##ent++ )
	
#define ASSERT( arg )		\
		if(!(arg)) {sys.warning("User-defined breakpoint: " + #arg);}	\
		sys.assert(arg)
// RAVEN END

// RAVEN BEGIN
// twhitaker: my editions

// Iterate through the objects contained in a list
#define qListForEach(list,ent) ForEachTargetOf(list,ent)

// Creates and returns a list instance
entity qListCreate( ) {
	return sys.spawn( "target_null" );
}

// Inserts an object into the list
void qListInsert( entity list, entity ent ) {
	if( list == $null_entity ) {
		return;
	}
	list.appendTarget( ent );
}

// Removes an entity from a list
void qListRemove( entity list, entity ent ) {
	if( list == $null_entity ) {
		return;
	}
	list.removeTarget( ent );
}

// Removes all entities from a list
void qListClear( entity list, float destroyContents ) {
	if( list == $null_entity ) {
		return;
	}
	
	list.clearTargetList( destroyContents );
}

// Destroys a list
void qListDestroy( entity list, float destroyContents ) {
	if( list == $null_entity ) {
		return;
	}
	
	if ( destroyContents ) {
		qListClear( list, destroyContents );
	}
		
	list.remove( );
}

// Returns the number of entities in the list
float qListCount( entity list ) {
	if( list == $null_entity ) {
		return 0;
	}
	
	list.removeNullTargets();
	return list.numTargets( );
}

// Returns a random entity from the list
entity qListRandom( entity list ) {
	if( list == $null_entity ) {
		return $null_entity;
	}
	
	list.removeNullTargets();
	return list.randomTarget( "" );
}

// Builds list from prefixed targets on object
void qListBuildFrom( entity ent, string prefix, entity list ) {
	string key;
	entity entValue;
	
	if( list == $null_entity ) {
		return;
	}
	
	qListClear( list, 0 );
	ASSERT( !qListCount(list) );
	for( key = ent.matchPrefix(prefix, ""); key != ""; key = ent.matchPrefix(prefix, key) ) {
		entValue = ent.getEntityKey( key );
		if( entValue == $null_entity ) {
			continue;
		}
		
		qListInsert( list, entValue );
	}
}

// RAVEN BEGIN
// mekberg: radiochatter support.
// Pass in the name of the sound shader to play if you want to change it, NOT the pre-cached snd_ name.
// To play the sound specified on the radiochatter, just pass in double quotes ""
void radioChatterPlay ( entity ent, string sound ) {
	if ( sound != "" ) {
		ent.setKey ( "snd_radiochatter", sound );
	}
	sys.trigger ( ent );
}

void radioChatterPlayWait ( entity ent, string sound ) {
	radioChatterPlay ( ent, sound );
	while ( isValidEntity ( ent ) ) {
		if ( !ent.isActive( ) ) {
			return;
		}
		sys.waitFrame ( );
	}
}

void playAnimWait( entity ent, float channel, string animName ) {
	sys.wait( ent.playAnim( channel, animName ) );
}

void playCameraWait ( entity ent )
{
	ent.start ( );
	while ( isValidEntity ( ent ) ) {
		if ( !ent.isActive( ) ) {
			return;
		}
		sys.waitFrame ( );
	}
}

// aweldon: set move/accel/decel times for func_movers
void setNewTimes( entity mover , float newTime , float newAccel , float newDecel )	{

	// This function allows easy re-sets of mover times, acceleration times, and deceleration times
	// Handy for situations where movers are changing times all over the place and things start to
	// get cluttered.
	
	// Setting any of the three time parameters to -1 will cause the function to ignore it, leaving
	// the old time value. For example, setNewTimes( moveyThing , 2 , -1, .5 ); will set the new move
	// time to 2, leave the acceleration time at its previous value, and set the deceleration time to .5
	
	if( isValidEntity( mover ) )	{
	
		// If a valid time is set, change move time to newTime
		if( newTime != -1 )	{
			mover.time( newTime );
		}
		
		// If a valid time is set, change acceleration time to newAccel
		if( newAccel != -1 )	{
			mover.accelTime( newAccel );	
		}
	
		// If a valid time is set, change deceleration time to newDecel
		if( newDecel != -1 )	{
			mover.decelTime( newDecel );
		}
		
	}
	
	else	{
		sys.println( "Invalid entity specified, could not set move times." );
	}	
}

// mekberg: dynamic wrist guis
void aiSpeakComlinkWait ( entity ent, string lipsync ) {
	float key = ent.getFloatKey("noLook");
	ent.setKey("noLook", 1);
	aiScriptedAnimWait(ent, "com_link_start", 8, 0);
	aiScriptedAnimLoop(ent, "com_link_loop", 4);
	aiSpeakWait(ent, lipsync);
	aiScriptedAnimWait(ent, "com_link_end", 4, 1);
	ent.setKey("noLook", key);
}

void aiSpeakComlink ( entity ent, string lipsync ) {
	thread aiSpeakComlinkWait ( ent, lipsync );
}

// jdischler: returns a random point between the origins of two entities
//-----------------------------------------------------------------------
vector randomPointBetween(entity eEnt1, entity eEnt2 )
{
	vector vPt = '0 0 0';

	if ( isValidEntity( eEnt1 ) && isValidEntity( eEnt2 ))
	{
		vector vOrg = eEnt1.getOrigin();
		// get vector between
		vector vDif = VectorSubtract(eEnt2.getOrigin(), vOrg);

		// a random number between 0 -> 1, multiplied by the dif vector
		float fRnd = sys.random(1);
		vPt_x = vOrg_x + vDif_x * fRnd;
		vPt_y = vOrg_y + vDif_y * fRnd;
		vPt_z = vOrg_z + vDif_z * fRnd;
	}
	else	
	{
		sys.println( "randomPointBetween: Invalid entity specified." );
	}

	return vPt;
}

//--------------------------------------------------------------------------------------
// eLauncher : a triggerable entity (such as a projectile launcher).
//		NOTES: 
//		1) this entity will be relocated on calling this function, so its start location is irrelevant.
//		2) this entity will have its angles set to aim at the target location..targeting it at an entity
//			may cause it to just not work at all.
//
// eFrom :  entity that must be targeted at another entity.  These entities define a line on
//		which a missile will randomly be spawned. eLauncher is moved to this spot.
//
// eTo : must be targeted at another entity.  These entities define a line on which
//		a random point will be selected for the destination of the missile. The
//		target of eLauncher will be moved to this spot.
//--------------------------------------------------------------------------------------
void shootFromTo( entity eLauncher, entity eFrom, entity eTo )
{
	vector vStart = randomPointBetween( eFrom, eFrom.getTarget(0) );
	vector vEnd = randomPointBetween( eTo, eTo.getTarget(0) );
	vector vDir = VectorSubtract( vEnd , vStart );

	eLauncher.setOrigin( vStart );
	eLauncher.setAngles( sys.VecToAngles( vDir ));

	sys.trigger( eLauncher );
}

// aweldon: wrapper to do scripted jump downs on monster spawn. Entity-only implementation in the editor.
void moveToJumpMain( entity imJumping )	{

	// To use: Create a target_null at the spot where the jump will commence. Set the "angle" key
	// to the desired value. When targeting the monster, specify the "moveToJump" function in script_init.
	// That function will thread this function and, ideally, allow multiple guys to run this concurrently.
	// Target the target_null from the monster (and make sure it is the first target).
	// The monster will perform a scripted move to the jump point and jump at the specified angle
	// declared in the target_null.
	
	// If necessary, add a "radius" key to the target null with the desired scriptedMove radius.
	// This is best used in situations where a monster may have trouble reaching the exact point (i.e. 
	// a jump starting from terrain).
	
	// The monster will also become passive at the start of the function and become aggressive at the end.
	// This is in an attempt to keep guys from getting stuck in the jump cycle.
	
	// Declare variables for actions
	entity jumpFrom = imJumping.getTarget(0);
	float jumpDirection = jumpFrom.getFloatKey( "angle" );
	float radius = jumpFrom.getFloatKey( "radius" );
	
	// Become passive.
	imJumping.becomePassive(1);
	
	// Move to jump position
	if( isLivingEntity( imJumping ) )	{
		aiScriptedMoveWait( imJumping , jumpFrom , radius, 0 );
	}
		
	// Jump and become aggressive
	if( isLivingEntity( imJumping ) )	{
		imJumping.scriptedJumpDown( jumpDirection );
		imJumping.becomeAggressive();
	}	
}

// Thread this for when many guys are doing it.
void moveToJump( entity imJumping )	{
	thread 	moveToJumpMain( imJumping );
}

//----------------------------------------------------
// Special for bosses-- the health/difficulty scale changes for them
// 
float getBossHealthByDifficulty( float health, string diff )	{
	
	float fNewHealth = 0;

	// 0: weaksauce -30%
	if( diff == "0" )	{
		fNewHealth = health * 0.7;
	}
	// 1: normal: no change
	else if( diff == "1" )	{
		fNewHealth = health;
	}
	// 2: stremf: 80% of 140%, or 112%
	else if( diff == "2" )	{
		fNewHealth = health * 1.12;
	}
	// 3: mad stremf: 80% of 180%, or 144%
	else if( diff == "3" )	{
		fNewHealth = health * 1.44;
	}
	// uh oh
	else	{
		sys.error("Bad difficulty level '" + diff + "' sent to getBossHealthByDifficulty!");
	}

	return fNewHealth;

}

void rotateRail()	{
	float f = 0;

	while(1)	{
		f+= 10;
		if( f > 360){ f-=360;}
		sys.setcvar ("ui_hitscanTint", f + " 1 1");
		sys.wait(0.05);
	}

}
// RAVEN END
